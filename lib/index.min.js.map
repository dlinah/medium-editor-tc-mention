{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///index.min.js","webpack:///webpack/bootstrap e0e7e16c0e24d2c8deed","webpack:///./src/index.js","webpack:///external \"MediumEditor\""],"names":["root","factory","exports","module","require","define","amd","a","i","this","__WEBPACK_EXTERNAL_MODULE_1__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","unwrapForTextNode","el","doc","prevNode","currentNode","parentNode","_mediumEditor2","util","unwrap","lastChild","previousSibling","nodeType","textContent","removeChild","Object","defineProperty","value","_mediumEditor","atKeyCode","hashKeyCode","TCMention","Extension","extend","name","tagName","renderPanelContent","activeTriggerList","triggerClassNameMap","#","@","init","mentionPanel","createPanel","getEditorOption","appendChild","subscribe","handleKeydown","bind","trigger","triggerClassName","activeMentionAt","document","createElement","className","innerHTML","getTemplate","destroy","event","getKeyCode","keyCode","ESCAPE","hidePanel","SPACE","ENTER","BACKSPACE","_MediumEditor$selection$getSelectionRange","selection","getSelectionRange","startOffset","endOffset","indexOf","handleTriggerKeydown","updatePanelContentWithDelay","preventDefault","selectionStart","getSelectionStart","classList","contains","showPanel","positionPanel","handleSelectMention","seletedText","textNode","childNodes","select","length","remove","base","saveSelection","restoreSelection","html","insertHTMLCommand","querySelector","add","_activeMentionAt$getBoundingClientRect","getBoundingClientRect","bottom","left","pageYOffset","window","style","top","updatePanelContent","delay"],"mappings":"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","file":"index.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"MediumEditor\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"MediumEditor\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"MediumEditor\")) : factory(root[\"MediumEditor\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"MediumEditor\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"MediumEditor\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"MediumEditor\")) : factory(root[\"MediumEditor\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.unwrapForTextNode = unwrapForTextNode;\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\t\n\tvar _mediumEditor = __webpack_require__(1);\n\t\n\tvar _mediumEditor2 = _interopRequireDefault(_mediumEditor);\n\t\n\tvar atKeyCode = 50;\n\texports.atKeyCode = atKeyCode;\n\tvar hashKeyCode = 51;\n\t\n\texports.hashKeyCode = hashKeyCode;\n\t\n\tfunction unwrapForTextNode(el, doc) {\n\t    var parentNode = el.parentNode,\n\t        prevNode,\n\t        currentNode;\n\t    _mediumEditor2[\"default\"].util.unwrap(el, doc);\n\t    // Merge textNode\n\t    currentNode = parentNode.lastChild;\n\t    while (prevNode = currentNode.previousSibling) {\n\t        if (3 === currentNode.nodeType && 3 === prevNode.nodeType) {\n\t            prevNode.textContent += currentNode.textContent;\n\t            parentNode.removeChild(currentNode);\n\t        }\n\t        currentNode = prevNode;\n\t    }\n\t}\n\t\n\tvar TCMention = _mediumEditor2[\"default\"].Extension.extend({\n\t    name: \"mention\",\n\t\n\t    /* tagNames: [string]\n\t     *\n\t     * Element tag name that would indicate that this mention. It will have\n\t     * `medium-editor-mention-at` className applied on it.\n\t     */\n\t    tagName: \"strong\",\n\t\n\t    /* renderPanelContent: [function (panelEl: dom, currentMentionText: string, selectMentionCallback: function)]\n\t     *\n\t     * Render function that used to create the content of the panel when panel is show.\n\t     *\n\t     * @params panelEl: DOM element of the panel.\n\t     *\n\t     * @params currentMentionText: Often used as query criteria. e.g. @medium\n\t     *\n\t     * @params selectMentionCallback:\n\t     *      callback used in customized panel content.\n\t     *\n\t     *      When called with null, it tells the Mention plugin to close the panel.\n\t     *          e.g. selectMentionCallback(null);\n\t     *\n\t     *      When called with text, it tells the Mention plugin that the text is selected by the user.\n\t     *          e.g. selectMentionCallback(\"@mediumrocks\")\n\t     */\n\t    renderPanelContent: function renderPanelContent() {},\n\t\n\t    activeTriggerList: [\"@\"],\n\t\n\t    triggerClassNameMap: {\n\t        \"#\": \"medium-editor-mention-hash\",\n\t        \"@\": \"medium-editor-mention-at\"\n\t    },\n\t\n\t    init: function init() {\n\t        this.mentionPanel = this.createPanel();\n\t\n\t        this.getEditorOption(\"elementsContainer\").appendChild(this.mentionPanel);\n\t\n\t        this.subscribe(\"editableKeydown\", this.handleKeydown.bind(this));\n\t        //\n\t        // instance variables\n\t        this.trigger = null;\n\t        this.triggerClassName = null;\n\t        this.activeMentionAt = null;\n\t    },\n\t\n\t    createPanel: function createPanel() {\n\t        var el = this.document.createElement(\"div\");\n\t\n\t        el.className = \"medium-editor-mention-panel\";\n\t        el.innerHTML = this.getTemplate();\n\t\n\t        return el;\n\t    },\n\t\n\t    getTemplate: function getTemplate() {\n\t        return \"<p>\\nYour mention implementation\\n</p>\";\n\t    },\n\t\n\t    destroy: function destroy() {\n\t        if (this.mentionPanel) {\n\t            if (this.mentionPanel.parentNode) {\n\t                this.mentionPanel.parentNode.removeChild(this.mentionPanel);\n\t            }\n\t            delete this.mentionPanel;\n\t        }\n\t    },\n\t\n\t    handleKeydown: function handleKeydown(event) {\n\t        switch (_mediumEditor2[\"default\"].util.getKeyCode(event)) {\n\t            case _mediumEditor2[\"default\"].util.keyCode.ESCAPE:\n\t                this.hidePanel();\n\t                break;\n\t            case _mediumEditor2[\"default\"].util.keyCode.SPACE:\n\t                this.hidePanel();\n\t                break;\n\t            case _mediumEditor2[\"default\"].util.keyCode.ENTER:\n\t                this.hidePanel();\n\t                break;\n\t            case _mediumEditor2[\"default\"].util.keyCode.BACKSPACE:\n\t                var _MediumEditor$selection$getSelectionRange = _mediumEditor2[\"default\"].selection.getSelectionRange(this.document),\n\t                    startOffset = _MediumEditor$selection$getSelectionRange.startOffset,\n\t                    endOffset = _MediumEditor$selection$getSelectionRange.endOffset;\n\t\n\t                if (1 === startOffset && 1 === endOffset) {\n\t                    // last word. So `@` will be deleted.\n\t                    this.hidePanel();\n\t                }\n\t                break;\n\t            case atKeyCode:\n\t                if (-1 !== this.activeTriggerList.indexOf(\"@\")) {\n\t                    this.handleTriggerKeydown(\"@\", event);\n\t                } else {\n\t                    this.updatePanelContentWithDelay();\n\t                }\n\t                break;\n\t            case hashKeyCode:\n\t                if (-1 !== this.activeTriggerList.indexOf(\"#\")) {\n\t                    this.handleTriggerKeydown(\"#\", event);\n\t                } else {\n\t                    this.updatePanelContentWithDelay();\n\t                }\n\t                break;\n\t            default:\n\t                this.updatePanelContentWithDelay();\n\t                break;\n\t        }\n\t    },\n\t\n\t    handleTriggerKeydown: function handleTriggerKeydown(trigger, event) {\n\t        this.trigger = trigger;\n\t        this.triggerClassName = this.triggerClassNameMap[this.trigger];\n\t\n\t        event.preventDefault(); // Remove typed in `${ this.trigger }`\n\t        var selectionStart = _mediumEditor2[\"default\"].selection.getSelectionStart(this.document);\n\t        if (selectionStart.classList.contains(this.triggerClassName)) {\n\t            // The case: `##` or `#medium#`\n\t            // Just ignore it for now.\n\t            return;\n\t        }\n\t        this.hidePanel();\n\t        this.showPanel();\n\t        this.positionPanel();\n\t        this.updatePanelContentWithDelay();\n\t    },\n\t\n\t    handleSelectMention: function handleSelectMention(seletedText) {\n\t        if (seletedText) {\n\t            var textNode = this.activeMentionAt.childNodes[0];\n\t            textNode.textContent = seletedText;\n\t            _mediumEditor2[\"default\"].selection.select(this.document, textNode, seletedText.length);\n\t            //\n\t            this.hidePanel();\n\t        } else {\n\t            this.hidePanel();\n\t        }\n\t    },\n\t\n\t    hidePanel: function hidePanel() {\n\t        this.mentionPanel.classList.remove(\"medium-editor-mention-panel-active\");\n\t\n\t        if (this.activeMentionAt) {\n\t            // LIKE core#execAction\n\t            this.base.saveSelection();\n\t            unwrapForTextNode(this.activeMentionAt, this.document);\n\t            this.base.restoreSelection();\n\t            // LIKE core#execAction\n\t            this.activeMentionAt = null;\n\t        }\n\t    },\n\t\n\t    showPanel: function showPanel() {\n\t        // Instead, insert our own version of it.\n\t        // TODO: Not sure why, but using <span> tag doens't work here\n\t        var html = \"<\" + this.tagName + \" class=\\\"\" + this.triggerClassName + \"\\\">\" + this.trigger + \"</\" + this.tagName + \">\";\n\t        _mediumEditor2[\"default\"].util.insertHTMLCommand(this.document, html);\n\t\n\t        if (this.mentionPanel.classList.contains(\"medium-editor-mention-panel-active\")) {\n\t            return;\n\t        }\n\t\n\t        this.activeMentionAt = this.document.querySelector(\".\" + this.triggerClassName);\n\t        this.mentionPanel.classList.add(\"medium-editor-mention-panel-active\");\n\t    },\n\t\n\t    positionPanel: function positionPanel() {\n\t        var _activeMentionAt$getBoundingClientRect = this.activeMentionAt.getBoundingClientRect();\n\t\n\t        var bottom = _activeMentionAt$getBoundingClientRect.bottom;\n\t        var left = _activeMentionAt$getBoundingClientRect.left;\n\t        var pageYOffset = this.window.pageYOffset;\n\t\n\t        this.mentionPanel.style.top = bottom + pageYOffset + \"px\";\n\t        this.mentionPanel.style.left = left + \"px\";\n\t    },\n\t\n\t    updatePanelContent: function updatePanelContent() {\n\t        var textContent = this.activeMentionAt.textContent;\n\t\n\t        this.renderPanelContent(this.mentionPanel, textContent, this.handleSelectMention.bind(this));\n\t    },\n\t\n\t    updatePanelContentWithDelay: function updatePanelContentWithDelay() {\n\t        if (this.activeMentionAt && this.activeMentionAt === _mediumEditor2[\"default\"].selection.getSelectionStart(this.document)) {\n\t            this.base.delay(this.updatePanelContent.bind(this));\n\t        }\n\t    }\n\t\n\t});\n\t\n\texports.TCMention = TCMention;\n\texports[\"default\"] = TCMention;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** index.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap e0e7e16c0e24d2c8deed\n **/","import MediumEditor from \"medium-editor\";\n\nexport const atKeyCode = 50;\nexport const hashKeyCode = 51;\n\nexport function unwrapForTextNode (el, doc) {\n    var parentNode = el.parentNode,\n        prevNode,\n        currentNode;\n    MediumEditor.util.unwrap(el, doc);\n    // Merge textNode\n    currentNode = parentNode.lastChild;\n    while (prevNode = currentNode.previousSibling) {\n        if (3 === currentNode.nodeType && 3 === prevNode.nodeType) {\n            prevNode.textContent += currentNode.textContent;\n            parentNode.removeChild(currentNode);\n        }\n        currentNode = prevNode;\n    }\n}\n\nexport const TCMention = MediumEditor.Extension.extend({\n    name: `mention`,\n\n    /* tagNames: [string]\n     *\n     * Element tag name that would indicate that this mention. It will have\n     * `medium-editor-mention-at` className applied on it.\n     */\n    tagName: `strong`,\n\n    /* renderPanelContent: [function (panelEl: dom, currentMentionText: string, selectMentionCallback: function)]\n     *\n     * Render function that used to create the content of the panel when panel is show.\n     *\n     * @params panelEl: DOM element of the panel.\n     *\n     * @params currentMentionText: Often used as query criteria. e.g. @medium\n     *\n     * @params selectMentionCallback:\n     *      callback used in customized panel content.\n     *\n     *      When called with null, it tells the Mention plugin to close the panel.\n     *          e.g. selectMentionCallback(null);\n     *\n     *      When called with text, it tells the Mention plugin that the text is selected by the user.\n     *          e.g. selectMentionCallback(\"@mediumrocks\")\n     */\n    renderPanelContent: () => {},\n\n    activeTriggerList: [`@`],\n\n    triggerClassNameMap: {\n        \"#\": `medium-editor-mention-hash`,\n        \"@\": `medium-editor-mention-at`,\n    },\n\n    init () {\n        this.mentionPanel = this.createPanel();\n\n        this.getEditorOption(`elementsContainer`).appendChild(this.mentionPanel);\n\n        this.subscribe(`editableKeydown`, ::this.handleKeydown);\n        //\n        // instance variables\n        this.trigger = null;\n        this.triggerClassName = null;\n        this.activeMentionAt = null;\n    },\n\n    createPanel () {\n        const el = this.document.createElement(`div`);\n\n        el.className = `medium-editor-mention-panel`;\n        el.innerHTML = this.getTemplate();\n\n        return el;\n    },\n\n    getTemplate: function () {\n        return (\n`<p>\nYour mention implementation\n</p>`);\n    },\n\n    destroy: function () {\n        if (this.mentionPanel) {\n            if (this.mentionPanel.parentNode) {\n                this.mentionPanel.parentNode.removeChild(this.mentionPanel);\n            }\n            delete this.mentionPanel;\n        }\n    },\n\n    handleKeydown (event) {\n        switch(MediumEditor.util.getKeyCode(event)) {\n            case MediumEditor.util.keyCode.ESCAPE:\n                this.hidePanel();\n                break;\n            case MediumEditor.util.keyCode.SPACE:\n                this.hidePanel();\n                break;\n            case MediumEditor.util.keyCode.ENTER:\n                this.hidePanel();\n                break;\n            case MediumEditor.util.keyCode.BACKSPACE:\n                const {startOffset, endOffset} = MediumEditor.selection.getSelectionRange(this.document);\n                if (1 === startOffset && 1 === endOffset) {\n                    // last word. So `@` will be deleted.\n                    this.hidePanel();\n                }\n                break;\n            case atKeyCode:\n                if (-1 !== this.activeTriggerList.indexOf(`@`)) {\n                    this.handleTriggerKeydown(`@`, event);\n                } else {\n                    this.updatePanelContentWithDelay();\n                }\n                break;\n            case hashKeyCode:\n                if (-1 !== this.activeTriggerList.indexOf(`#`)) {\n                    this.handleTriggerKeydown(`#`, event);\n                } else {\n                    this.updatePanelContentWithDelay();\n                }\n                break;\n            default:\n                this.updatePanelContentWithDelay();\n                break;\n        }\n    },\n\n    handleTriggerKeydown (trigger, event) {\n        this.trigger = trigger;\n        this.triggerClassName = this.triggerClassNameMap[this.trigger];\n\n        event.preventDefault(); // Remove typed in `${ this.trigger }`\n        const selectionStart = MediumEditor.selection.getSelectionStart(this.document);\n        if (selectionStart.classList.contains(this.triggerClassName)) {\n            // The case: `##` or `#medium#`\n            // Just ignore it for now.\n            return;\n        }\n        this.hidePanel();\n        this.showPanel();\n        this.positionPanel();\n        this.updatePanelContentWithDelay();\n    },\n\n    handleSelectMention (seletedText) {\n        if (seletedText) {\n            const textNode = this.activeMentionAt.childNodes[0];\n            textNode.textContent = seletedText;\n            MediumEditor.selection.select(this.document, textNode, seletedText.length);\n            //\n            this.hidePanel();\n        } else {\n            this.hidePanel();\n        }\n    },\n\n    hidePanel () {\n        this.mentionPanel.classList.remove(`medium-editor-mention-panel-active`);\n\n        if (this.activeMentionAt) {\n            // LIKE core#execAction\n            this.base.saveSelection();\n            unwrapForTextNode(this.activeMentionAt, this.document);\n            this.base.restoreSelection();\n            // LIKE core#execAction\n            this.activeMentionAt = null;\n        }\n    },\n\n    showPanel () {\n        // Instead, insert our own version of it.\n        // TODO: Not sure why, but using <span> tag doens't work here\n        const html = `<${ this.tagName } class=\"${ this.triggerClassName }\">${ this.trigger }</${ this.tagName }>`;\n        MediumEditor.util.insertHTMLCommand(this.document, html);\n\n        if (this.mentionPanel.classList.contains(`medium-editor-mention-panel-active`)) {\n            return;\n        }\n\n        this.activeMentionAt = this.document.querySelector(`.${ this.triggerClassName }`)\n        this.mentionPanel.classList.add(`medium-editor-mention-panel-active`);\n    },\n\n    positionPanel () {\n        const {bottom, left} = this.activeMentionAt.getBoundingClientRect();\n        const {pageYOffset} = this.window;\n\n        this.mentionPanel.style.top = `${ bottom + pageYOffset }px`;\n        this.mentionPanel.style.left = `${ left }px`;\n    },\n\n    updatePanelContent () {\n        const {textContent} = this.activeMentionAt;\n        this.renderPanelContent(this.mentionPanel, textContent, ::this.handleSelectMention);\n    },\n\n    updatePanelContentWithDelay () {\n        if (this.activeMentionAt && this.activeMentionAt === MediumEditor.selection.getSelectionStart(this.document)) {\n            this.base.delay(::this.updatePanelContent);\n        }\n    },\n\n});\n\nexport default TCMention;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"MediumEditor\"\n ** module id = 1\n ** module chunks = 0\n **/"],"sourceRoot":""}